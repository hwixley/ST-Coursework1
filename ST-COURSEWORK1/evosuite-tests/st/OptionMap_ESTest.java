/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 30 12:41:22 GMT 2021
 */

package st;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import st.OptionMap;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class OptionMap_ESTest extends OptionMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (String) null, (Integer) optionMap0.BOOLEAN);
      String string0 = optionMap_Option0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (String) null, (Integer) optionMap0.STRING);
      String string0 = optionMap_Option0.getName();
      assertEquals("OptionMap [options=\n]", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (String) null, (Integer) optionMap0.INTEGER);
      String string0 = optionMap_Option0.getShortcut();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("OptionMap [options=\n]", (String) null, (Integer) optionMap0.CHAR);
      Object object0 = new Object();
      boolean boolean0 = optionMap_Option0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      // Undeclared exception!
      try { 
        optionMap0.store("o9RF", "BUG NUMBER 10 IS FOUNDED: -- <3 points>", (-958));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("st.OptionMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.setValueWithOptioShortcut("@SV5]u7", (String) null);
      assertEquals(3, OptionMap.STRING);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.setValueWithOptionName("BUG NUMBER 10 IS FOUNDED: -- <3 points>", "8l");
      assertEquals(2, OptionMap.BOOLEAN);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      int int0 = optionMap0.getType((String) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      String string0 = optionMap0.getValue("BUG NUMBER 10 IS FOUNDED: -- <3 points>");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("o", "", 1);
      String string0 = optionMap0.getValue("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (String) null, (Integer) optionMap0.CHAR);
      optionMap_Option0.setValue((String) null);
      assertEquals(4, (int)optionMap_Option0.getType());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option("", "Jh2:y", (Integer) 3);
      optionMap_Option0.setShortcut("o9RF");
      assertEquals("", optionMap_Option0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      OptionMap.Option optionMap_Option0 = optionMap0.new Option((String) null, (String) null, (Integer) optionMap0.CHAR);
      optionMap_Option0.setName((String) null);
      assertNull(optionMap_Option0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OptionMap optionMap0 = new OptionMap();
      optionMap0.store("o", "", 1);
      String string0 = optionMap0.toString();
      assertEquals("OptionMap [options=\n\t{name=o, shortcut=, type=1, value=}\n]", string0);
  }
}
